// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.0
// Machine:  TSNK
// DateTime: 2014-05-26 6:40:51 PM
// UserName: Samuel
// Input file <CbParser.y - 2014-05-26 6:38:24 PM>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using System.IO;

public enum Tokens {error=126,
    EOF=127,OROR=128,ANDAND=129,EQEQ=130,NOTEQ=131,GTEQ=132,
    LTEQ=133,UMINUS=134,Kwd_break=135,Kwd_class=136,Kwd_const=137,Kwd_else=138,
    Kwd_if=139,Kwd_int=140,Kwd_new=141,Kwd_out=142,Kwd_public=143,Kwd_return=144,
    Kwd_static=145,Kwd_string=146,Kwd_using=147,Kwd_void=148,Kwd_while=149,PLUSPLUS=150,
    MINUSMINUS=151,Ident=152,Number=153,StringConst=154,Kwd_null=155,Kwd_System=156,
    Kwd_Main=157};

// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<int,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
public class ScanObj {
  public int token;
  public int yylval;
  public LexLocation yylloc;
  public ScanObj( int t, int val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

public class Parser: ShiftReduceParser<int, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[78];
  private static State[] states = new State[153];
  private static string[] nonTerms = new string[] {
      "Program", "$accept", "UsingList", "ClassList", "ClassDecl", "DeclList", 
      "ConstDecl", "MethodDecl", "Type", "InitVal", "FieldDeclList", "FieldDecl", 
      "IdentList", "OptFormals", "Block", "FormalPars", "FormalDecl", "TypeName", 
      "Statement", "Designator", "Expr", "OptActuals", "OptElsePart", "ActPars", 
      "DeclsAndStmts", "LocalDecl", "Qualifiers", };

  static Parser() {
    states[0] = new State(new int[]{147,149,136,-3},new int[]{-1,1,-3,3});
    states[1] = new State(new int[]{127,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{136,6},new int[]{-4,4,-5,148});
    states[4] = new State(new int[]{136,6,127,-2},new int[]{-5,5});
    states[5] = new State(-5);
    states[6] = new State(new int[]{152,7});
    states[7] = new State(new int[]{123,8});
    states[8] = new State(-10,new int[]{-6,9});
    states[9] = new State(new int[]{125,10,143,13},new int[]{-7,11,-8,12});
    states[10] = new State(-7);
    states[11] = new State(-8);
    states[12] = new State(-9);
    states[13] = new State(new int[]{137,14,145,28});
    states[14] = new State(new int[]{152,25,140,26,146,27},new int[]{-9,15,-18,22});
    states[15] = new State(new int[]{152,16});
    states[16] = new State(new int[]{61,17});
    states[17] = new State(new int[]{153,20,154,21},new int[]{-10,18});
    states[18] = new State(new int[]{59,19});
    states[19] = new State(-11);
    states[20] = new State(-12);
    states[21] = new State(-13);
    states[22] = new State(new int[]{91,23,152,-25});
    states[23] = new State(new int[]{93,24});
    states[24] = new State(-26);
    states[25] = new State(-27);
    states[26] = new State(-28);
    states[27] = new State(-29);
    states[28] = new State(new int[]{148,29});
    states[29] = new State(new int[]{152,30});
    states[30] = new State(new int[]{40,31});
    states[31] = new State(new int[]{152,25,140,26,146,27,41,-20},new int[]{-14,32,-16,142,-17,147,-9,145,-18,22});
    states[32] = new State(new int[]{41,33});
    states[33] = new State(new int[]{123,35},new int[]{-15,34});
    states[34] = new State(-19);
    states[35] = new State(-49,new int[]{-25,36});
    states[36] = new State(new int[]{125,37,152,111,139,121,149,129,135,134,144,136,123,35,59,141},new int[]{-19,38,-26,39,-20,40,-15,140});
    states[37] = new State(-46);
    states[38] = new State(-50);
    states[39] = new State(-51);
    states[40] = new State(new int[]{61,41,40,103,150,107,151,109});
    states[41] = new State(new int[]{45,70,152,79,153,88,154,89,141,92,40,99},new int[]{-21,42,-20,72});
    states[42] = new State(new int[]{59,43,128,44,129,46,130,48,131,50,133,52,60,54,132,56,62,58,43,60,45,62,42,64,47,66,37,68});
    states[43] = new State(-30);
    states[44] = new State(new int[]{45,70,152,79,153,88,154,89,141,92,40,99},new int[]{-21,45,-20,72});
    states[45] = new State(new int[]{128,-52,129,46,130,48,131,50,133,52,60,54,132,56,62,58,43,60,45,62,42,64,47,66,37,68,59,-52,44,-52,41,-52,93,-52});
    states[46] = new State(new int[]{45,70,152,79,153,88,154,89,141,92,40,99},new int[]{-21,47,-20,72});
    states[47] = new State(new int[]{128,-53,129,-53,130,48,131,50,133,52,60,54,132,56,62,58,43,60,45,62,42,64,47,66,37,68,59,-53,44,-53,41,-53,93,-53});
    states[48] = new State(new int[]{45,70,152,79,153,88,154,89,141,92,40,99},new int[]{-21,49,-20,72});
    states[49] = new State(new int[]{128,-54,129,-54,130,48,131,50,133,52,60,54,132,56,62,58,43,60,45,62,42,64,47,66,37,68,59,-54,44,-54,41,-54,93,-54});
    states[50] = new State(new int[]{45,70,152,79,153,88,154,89,141,92,40,99},new int[]{-21,51,-20,72});
    states[51] = new State(new int[]{128,-55,129,-55,130,48,131,50,133,52,60,54,132,56,62,58,43,60,45,62,42,64,47,66,37,68,59,-55,44,-55,41,-55,93,-55});
    states[52] = new State(new int[]{45,70,152,79,153,88,154,89,141,92,40,99},new int[]{-21,53,-20,72});
    states[53] = new State(new int[]{128,-56,129,-56,130,-56,131,-56,133,52,60,54,132,56,62,58,43,60,45,62,42,64,47,66,37,68,59,-56,44,-56,41,-56,93,-56});
    states[54] = new State(new int[]{45,70,152,79,153,88,154,89,141,92,40,99},new int[]{-21,55,-20,72});
    states[55] = new State(new int[]{128,-57,129,-57,130,-57,131,-57,133,52,60,54,132,56,62,58,43,60,45,62,42,64,47,66,37,68,59,-57,44,-57,41,-57,93,-57});
    states[56] = new State(new int[]{45,70,152,79,153,88,154,89,141,92,40,99},new int[]{-21,57,-20,72});
    states[57] = new State(new int[]{128,-58,129,-58,130,-58,131,-58,133,52,60,54,132,56,62,58,43,60,45,62,42,64,47,66,37,68,59,-58,44,-58,41,-58,93,-58});
    states[58] = new State(new int[]{45,70,152,79,153,88,154,89,141,92,40,99},new int[]{-21,59,-20,72});
    states[59] = new State(new int[]{128,-59,129,-59,130,-59,131,-59,133,52,60,54,132,56,62,58,43,60,45,62,42,64,47,66,37,68,59,-59,44,-59,41,-59,93,-59});
    states[60] = new State(new int[]{45,70,152,79,153,88,154,89,141,92,40,99},new int[]{-21,61,-20,72});
    states[61] = new State(new int[]{128,-60,129,-60,130,-60,131,-60,133,-60,60,-60,132,-60,62,-60,43,-60,45,-60,42,64,47,66,37,68,59,-60,44,-60,41,-60,93,-60});
    states[62] = new State(new int[]{45,70,152,79,153,88,154,89,141,92,40,99},new int[]{-21,63,-20,72});
    states[63] = new State(new int[]{128,-61,129,-61,130,-61,131,-61,133,-61,60,-61,132,-61,62,-61,43,-61,45,-61,42,64,47,66,37,68,59,-61,44,-61,41,-61,93,-61});
    states[64] = new State(new int[]{45,70,152,79,153,88,154,89,141,92,40,99},new int[]{-21,65,-20,72});
    states[65] = new State(-62);
    states[66] = new State(new int[]{45,70,152,79,153,88,154,89,141,92,40,99},new int[]{-21,67,-20,72});
    states[67] = new State(-63);
    states[68] = new State(new int[]{45,70,152,79,153,88,154,89,141,92,40,99},new int[]{-21,69,-20,72});
    states[69] = new State(-64);
    states[70] = new State(new int[]{45,70,152,79,153,88,154,89,141,92,40,99},new int[]{-21,71,-20,72});
    states[71] = new State(-65);
    states[72] = new State(new int[]{40,73,59,-66,128,-66,129,-66,130,-66,131,-66,133,-66,60,-66,132,-66,62,-66,43,-66,45,-66,42,-66,47,-66,37,-66,44,-66,41,-66,93,-66});
    states[73] = new State(new int[]{45,70,152,79,153,88,154,89,141,92,40,99,41,-41},new int[]{-22,74,-24,76,-21,102,-20,72});
    states[74] = new State(new int[]{41,75});
    states[75] = new State(-67);
    states[76] = new State(new int[]{44,77,41,-42});
    states[77] = new State(new int[]{45,70,152,79,153,88,154,89,141,92,40,99},new int[]{-21,78,-20,72});
    states[78] = new State(new int[]{128,44,129,46,130,48,131,50,133,52,60,54,132,56,62,58,43,60,45,62,42,64,47,66,37,68,44,-43,41,-43});
    states[79] = new State(new int[]{46,81,91,84,40,-77,59,-77,128,-77,129,-77,130,-77,131,-77,133,-77,60,-77,132,-77,62,-77,43,-77,45,-77,42,-77,47,-77,37,-77,44,-77,41,-77,93,-77,61,-77,150,-77,151,-77},new int[]{-27,80});
    states[80] = new State(-74);
    states[81] = new State(new int[]{152,82});
    states[82] = new State(new int[]{46,81,91,84,40,-77,59,-77,128,-77,129,-77,130,-77,131,-77,133,-77,60,-77,132,-77,62,-77,43,-77,45,-77,42,-77,47,-77,37,-77,44,-77,41,-77,93,-77,61,-77,150,-77,151,-77},new int[]{-27,83});
    states[83] = new State(-75);
    states[84] = new State(new int[]{45,70,152,79,153,88,154,89,141,92,40,99},new int[]{-21,85,-20,72});
    states[85] = new State(new int[]{93,86,128,44,129,46,130,48,131,50,133,52,60,54,132,56,62,58,43,60,45,62,42,64,47,66,37,68});
    states[86] = new State(new int[]{46,81,91,84,40,-77,59,-77,128,-77,129,-77,130,-77,131,-77,133,-77,60,-77,132,-77,62,-77,43,-77,45,-77,42,-77,47,-77,37,-77,44,-77,41,-77,93,-77,61,-77,150,-77,151,-77},new int[]{-27,87});
    states[87] = new State(-76);
    states[88] = new State(-68);
    states[89] = new State(new int[]{46,90,59,-69,128,-69,129,-69,130,-69,131,-69,133,-69,60,-69,132,-69,62,-69,43,-69,45,-69,42,-69,47,-69,37,-69,44,-69,41,-69,93,-69});
    states[90] = new State(new int[]{152,91});
    states[91] = new State(-70);
    states[92] = new State(new int[]{152,93});
    states[93] = new State(new int[]{40,94,91,96});
    states[94] = new State(new int[]{41,95});
    states[95] = new State(-71);
    states[96] = new State(new int[]{45,70,152,79,153,88,154,89,141,92,40,99},new int[]{-21,97,-20,72});
    states[97] = new State(new int[]{93,98,128,44,129,46,130,48,131,50,133,52,60,54,132,56,62,58,43,60,45,62,42,64,47,66,37,68});
    states[98] = new State(-72);
    states[99] = new State(new int[]{45,70,152,79,153,88,154,89,141,92,40,99},new int[]{-21,100,-20,72});
    states[100] = new State(new int[]{41,101,128,44,129,46,130,48,131,50,133,52,60,54,132,56,62,58,43,60,45,62,42,64,47,66,37,68});
    states[101] = new State(-73);
    states[102] = new State(new int[]{128,44,129,46,130,48,131,50,133,52,60,54,132,56,62,58,43,60,45,62,42,64,47,66,37,68,44,-44,41,-44});
    states[103] = new State(new int[]{45,70,152,79,153,88,154,89,141,92,40,99,41,-41},new int[]{-22,104,-24,76,-21,102,-20,72});
    states[104] = new State(new int[]{41,105});
    states[105] = new State(new int[]{59,106});
    states[106] = new State(-31);
    states[107] = new State(new int[]{59,108});
    states[108] = new State(-32);
    states[109] = new State(new int[]{59,110});
    states[110] = new State(-33);
    states[111] = new State(new int[]{91,116,46,81,152,120,61,-77,40,-77,150,-77,151,-77},new int[]{-27,80,-13,112});
    states[112] = new State(new int[]{59,113,44,114});
    states[113] = new State(-47);
    states[114] = new State(new int[]{152,115});
    states[115] = new State(-17);
    states[116] = new State(new int[]{93,117,45,70,152,79,153,88,154,89,141,92,40,99},new int[]{-21,85,-20,72});
    states[117] = new State(new int[]{152,120},new int[]{-13,118});
    states[118] = new State(new int[]{59,119,44,114});
    states[119] = new State(-48);
    states[120] = new State(-18);
    states[121] = new State(new int[]{40,122});
    states[122] = new State(new int[]{45,70,152,79,153,88,154,89,141,92,40,99},new int[]{-21,123,-20,72});
    states[123] = new State(new int[]{41,124,128,44,129,46,130,48,131,50,133,52,60,54,132,56,62,58,43,60,45,62,42,64,47,66,37,68});
    states[124] = new State(new int[]{152,79,139,121,149,129,135,134,144,136,123,35,59,141},new int[]{-19,125,-20,40,-15,140});
    states[125] = new State(new int[]{138,127},new int[]{-23,126});
    states[126] = new State(-34);
    states[127] = new State(new int[]{152,79,139,121,149,129,135,134,144,136,123,35,59,141},new int[]{-19,128,-20,40,-15,140});
    states[128] = new State(-45);
    states[129] = new State(new int[]{40,130});
    states[130] = new State(new int[]{45,70,152,79,153,88,154,89,141,92,40,99},new int[]{-21,131,-20,72});
    states[131] = new State(new int[]{41,132,128,44,129,46,130,48,131,50,133,52,60,54,132,56,62,58,43,60,45,62,42,64,47,66,37,68});
    states[132] = new State(new int[]{152,79,139,121,149,129,135,134,144,136,123,35,59,141},new int[]{-19,133,-20,40,-15,140});
    states[133] = new State(-35);
    states[134] = new State(new int[]{59,135});
    states[135] = new State(-36);
    states[136] = new State(new int[]{59,137,45,70,152,79,153,88,154,89,141,92,40,99},new int[]{-21,138,-20,72});
    states[137] = new State(-37);
    states[138] = new State(new int[]{59,139,128,44,129,46,130,48,131,50,133,52,60,54,132,56,62,58,43,60,45,62,42,64,47,66,37,68});
    states[139] = new State(-38);
    states[140] = new State(-39);
    states[141] = new State(-40);
    states[142] = new State(new int[]{44,143,41,-21});
    states[143] = new State(new int[]{152,25,140,26,146,27},new int[]{-17,144,-9,145,-18,22});
    states[144] = new State(-23);
    states[145] = new State(new int[]{152,146});
    states[146] = new State(-24);
    states[147] = new State(-22);
    states[148] = new State(-6);
    states[149] = new State(new int[]{152,150});
    states[150] = new State(new int[]{59,151});
    states[151] = new State(new int[]{147,149,136,-3},new int[]{-3,152});
    states[152] = new State(-4);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,127});
    rules[2] = new Rule(-1, new int[]{-3,-4});
    rules[3] = new Rule(-3, new int[]{});
    rules[4] = new Rule(-3, new int[]{147,152,59,-3});
    rules[5] = new Rule(-4, new int[]{-4,-5});
    rules[6] = new Rule(-4, new int[]{-5});
    rules[7] = new Rule(-5, new int[]{136,152,123,-6,125});
    rules[8] = new Rule(-6, new int[]{-6,-7});
    rules[9] = new Rule(-6, new int[]{-6,-8});
    rules[10] = new Rule(-6, new int[]{});
    rules[11] = new Rule(-7, new int[]{143,137,-9,152,61,-10,59});
    rules[12] = new Rule(-10, new int[]{153});
    rules[13] = new Rule(-10, new int[]{154});
    rules[14] = new Rule(-11, new int[]{-11,-12});
    rules[15] = new Rule(-11, new int[]{});
    rules[16] = new Rule(-12, new int[]{143,-9,-13,59});
    rules[17] = new Rule(-13, new int[]{-13,44,152});
    rules[18] = new Rule(-13, new int[]{152});
    rules[19] = new Rule(-8, new int[]{143,145,148,152,40,-14,41,-15});
    rules[20] = new Rule(-14, new int[]{});
    rules[21] = new Rule(-14, new int[]{-16});
    rules[22] = new Rule(-16, new int[]{-17});
    rules[23] = new Rule(-16, new int[]{-16,44,-17});
    rules[24] = new Rule(-17, new int[]{-9,152});
    rules[25] = new Rule(-9, new int[]{-18});
    rules[26] = new Rule(-9, new int[]{-18,91,93});
    rules[27] = new Rule(-18, new int[]{152});
    rules[28] = new Rule(-18, new int[]{140});
    rules[29] = new Rule(-18, new int[]{146});
    rules[30] = new Rule(-19, new int[]{-20,61,-21,59});
    rules[31] = new Rule(-19, new int[]{-20,40,-22,41,59});
    rules[32] = new Rule(-19, new int[]{-20,150,59});
    rules[33] = new Rule(-19, new int[]{-20,151,59});
    rules[34] = new Rule(-19, new int[]{139,40,-21,41,-19,-23});
    rules[35] = new Rule(-19, new int[]{149,40,-21,41,-19});
    rules[36] = new Rule(-19, new int[]{135,59});
    rules[37] = new Rule(-19, new int[]{144,59});
    rules[38] = new Rule(-19, new int[]{144,-21,59});
    rules[39] = new Rule(-19, new int[]{-15});
    rules[40] = new Rule(-19, new int[]{59});
    rules[41] = new Rule(-22, new int[]{});
    rules[42] = new Rule(-22, new int[]{-24});
    rules[43] = new Rule(-24, new int[]{-24,44,-21});
    rules[44] = new Rule(-24, new int[]{-21});
    rules[45] = new Rule(-23, new int[]{138,-19});
    rules[46] = new Rule(-15, new int[]{123,-25,125});
    rules[47] = new Rule(-26, new int[]{152,-13,59});
    rules[48] = new Rule(-26, new int[]{152,91,93,-13,59});
    rules[49] = new Rule(-25, new int[]{});
    rules[50] = new Rule(-25, new int[]{-25,-19});
    rules[51] = new Rule(-25, new int[]{-25,-26});
    rules[52] = new Rule(-21, new int[]{-21,128,-21});
    rules[53] = new Rule(-21, new int[]{-21,129,-21});
    rules[54] = new Rule(-21, new int[]{-21,130,-21});
    rules[55] = new Rule(-21, new int[]{-21,131,-21});
    rules[56] = new Rule(-21, new int[]{-21,133,-21});
    rules[57] = new Rule(-21, new int[]{-21,60,-21});
    rules[58] = new Rule(-21, new int[]{-21,132,-21});
    rules[59] = new Rule(-21, new int[]{-21,62,-21});
    rules[60] = new Rule(-21, new int[]{-21,43,-21});
    rules[61] = new Rule(-21, new int[]{-21,45,-21});
    rules[62] = new Rule(-21, new int[]{-21,42,-21});
    rules[63] = new Rule(-21, new int[]{-21,47,-21});
    rules[64] = new Rule(-21, new int[]{-21,37,-21});
    rules[65] = new Rule(-21, new int[]{45,-21});
    rules[66] = new Rule(-21, new int[]{-20});
    rules[67] = new Rule(-21, new int[]{-20,40,-22,41});
    rules[68] = new Rule(-21, new int[]{153});
    rules[69] = new Rule(-21, new int[]{154});
    rules[70] = new Rule(-21, new int[]{154,46,152});
    rules[71] = new Rule(-21, new int[]{141,152,40,41});
    rules[72] = new Rule(-21, new int[]{141,152,91,-21,93});
    rules[73] = new Rule(-21, new int[]{40,-21,41});
    rules[74] = new Rule(-20, new int[]{152,-27});
    rules[75] = new Rule(-27, new int[]{46,152,-27});
    rules[76] = new Rule(-27, new int[]{91,-21,93,-27});
    rules[77] = new Rule(-27, new int[]{});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 174 "CbParser.y"

#line 175 "CbParser.y"

#line 176 "CbParser.y"

#line 177 "CbParser.y"
//The following is how this was done in the lab
#line 178 "CbParser.y"

#line 179 "CbParser.y"
public Stack<string> id_stack = new Stack<string>();
#line 180 "CbParser.y"

#line 181 "CbParser.y"
public void push_id() {
#line 182 "CbParser.y"
  string t = ((LexScanner.Scanner)Scanner).last_token_text;
#line 183 "CbParser.y"
  id_stack.Push(t);
#line 184 "CbParser.y"
}
#line 185 "CbParser.y"
public string pop_id() {
#line 186 "CbParser.y"
  return id_stack.Pop();
#line 187 "CbParser.y"
}
#line 188 "CbParser.y"

#line 189 "CbParser.y"
public string token_text() {
#line 190 "CbParser.y"
  return ((LexScanner.Scanner)Scanner).last_token_text;
#line 191 "CbParser.y"
}
#line 192 "CbParser.y"

#line 193 "CbParser.y"
public void writeln() {
#line 194 "CbParser.y"
  writeln(null,null);
#line 195 "CbParser.y"
}
#line 196 "CbParser.y"
public void writeln(string opcode) {
#line 197 "CbParser.y"
  writeln(opcode,null);
#line 198 "CbParser.y"
}
#line 199 "CbParser.y"

#line 200 "CbParser.y"
public void writeln(string opcode, string value) {
#line 201 "CbParser.y"
  if (opcode != null) {
#line 202 "CbParser.y"
    System.Console.Write(opcode);
#line 203 "CbParser.y"
    if (value != null) {
#line 204 "CbParser.y"
      System.Console.Write(' '+value);
#line 205 "CbParser.y"
    }
#line 206 "CbParser.y"
  }
#line 207 "CbParser.y"
  System.Console.Write('\n');
#line 208 "CbParser.y"
}
#line 209 "CbParser.y"

#line 210 "CbParser.y"
public void openFile(FileStream file){
#line 211 "CbParser.y"
   this.Scanner = new LexScanner.Scanner(file);
#line 212 "CbParser.y"
}
#line 213 "CbParser.y"

#line 214 "CbParser.y"
// The parser needs a constructor
#line 215 "CbParser.y"
public Parser() : base(null) { }
}
