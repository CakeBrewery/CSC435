
// ==========================================================================
//  GPLEX error listing for lex source file <CbLexer.l>
// ==========================================================================
//  Version:  1.2.0
//  Machine:  TSNK
//  DateTime: 2014-05-27 12:51:13 PM
//  UserName: Samuel
// ==========================================================================


%namespace LexScanner
%tokentype Tokens

%{
  public int lineNum = 1;

  public int LineNumber { get{ return lineNum; } }

  public override void yyerror( string msg, params object[] args ) {
    Console.WriteLine("{0}: ", lineNum);
    if (args == null || args.Length == 0) {
      Console.WriteLine("{0}", msg);
    }
    else {
      Console.WriteLine(msg, args);
    }
  }

  public void yyerror( int lineNum, string msg, params object[] args ) {
    Console.WriteLine("{0}: {1}", msg, args);
  }

%}

space [ \t\n\r]
opchar [+\-*/\;] // must escape - as it signifies a range

%%


{space}               {}
//^^^^^
// Warning: This pattern always overrides ""\n"" 
// ----------------------------------------------

break {last_token_text=yytext; return (int)Tokens.Kwd_break;}
class {last_token_text=yytext; return (int)Tokens.Kwd_class;}
const {last_token_text=yytext; return (int)Tokens.Kwd_const;}
else  {last_token_text=yytext; return (int)Tokens.Kwd_else;}
if {last_token_text=yytext; return (int)Tokens.Kwd_if;}
int {last_token_text=yytext; return (int)Tokens.Kwd_int;}

new {last_token_text=yytext; return (int)Tokens.Kwd_new;}
out {last_token_text=yytext; return (int)Tokens.Kwd_out;}
public {last_token_text=yytext; return (int)Tokens.Kwd_public;}
return {last_token_text=yytext; return (int)Tokens.Kwd_return;}
static {last_token_text=yytext; return (int)Tokens.Kwd_string;}

using {last_token_text=yytext; return (int)Tokens.Kwd_using;}
while {last_token_text=yytext; return (int)Tokens.Kwd_while;}

null {last_token_text=yytext; return (int)Tokens.Kwd_null;}
Main {last_token_text=yytext; return (int)Tokens.Kwd_Main;}


0|[1-9][0-9]*         {last_token_text=yytext;return (int)Tokens.Number;}
[a-zA-Z][0-9a-zA-Z]*  {last_token_text=yytext;return (int)Tokens.Ident;}
{opchar}              {return (int)(yytext[0]);}
"\n"                  {return (int)'\n';}
//^^
// Warning: This pattern always overridden by "{space}" 
// -----------------------------------------------------
"\r\n"                {return (int)'\n';}

.                     { yyerror("illegal character ({0})", yytext); }




%%

public string last_token_text = "";

// ==========================================================================

