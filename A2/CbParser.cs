// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.0
// Machine:  TSNK
// DateTime: 2014-06-15 7:29:50 PM
// UserName: Samuel
// Input file <CbParser.y - 2014-06-13 5:34:30 PM>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace FrontEnd
{
public enum Tokens {error=126,
    EOF=127,OROR=128,ANDAND=129,EQEQ=130,NOTEQ=131,GTEQ=132,
    LTEQ=133,Kwd_break=134,Kwd_char=135,Kwd_class=136,Kwd_const=137,Kwd_else=138,
    Kwd_if=139,Kwd_int=140,Kwd_new=141,Kwd_null=142,Kwd_override=143,Kwd_public=144,
    Kwd_return=145,Kwd_static=146,Kwd_string=147,Kwd_using=148,Kwd_virtual=149,Kwd_void=150,
    Kwd_while=151,PLUSPLUS=152,MINUSMINUS=153,Ident=154,CharConst=155,IntConst=156,
    StringConst=157};

// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<AST,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
public class ScanObj {
  public int token;
  public AST yylval;
  public LexLocation yylloc;
  public ScanObj( int t, AST val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

public class Parser: ShiftReduceParser<AST, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[96];
  private static State[] states = new State[196];
  private static string[] nonTerms = new string[] {
      "Program", "$accept", "UsingList", "ClassList", "Identifier", "ClassDecl", 
      "DeclList", "ConstDecl", "FieldDecl", "MethodDecl", "Type", "InitVal", 
      "IdentList", "MethodAttr", "OptFormals", "Block", "FormalPars", "FormalDecl", 
      "TypeName", "BuiltInType", "Statement", "Designator", "Expr", "OptActuals", 
      "ActPars", "DeclsAndStmts", "LocalDecl", "UnaryExpr", "UnaryExprNotUMinus", 
      "Qualifiers", };

  static Parser() {
    states[0] = new State(-3,new int[]{-1,1,-3,3});
    states[1] = new State(new int[]{127,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{148,192,136,6},new int[]{-4,4,-6,195});
    states[4] = new State(new int[]{136,6,127,-2},new int[]{-6,5});
    states[5] = new State(-6);
    states[6] = new State(new int[]{154,24},new int[]{-5,7});
    states[7] = new State(new int[]{123,8,58,187});
    states[8] = new State(-9,new int[]{-7,9});
    states[9] = new State(new int[]{125,10,144,14},new int[]{-8,11,-9,12,-10,13});
    states[10] = new State(-7);
    states[11] = new State(-10);
    states[12] = new State(-11);
    states[13] = new State(-12);
    states[14] = new State(new int[]{137,15,154,24,140,30,147,31,135,32,146,184,149,185,143,186},new int[]{-11,33,-14,39,-19,25,-5,28,-20,29});
    states[15] = new State(new int[]{154,24,140,30,147,31,135,32},new int[]{-11,16,-19,25,-5,28,-20,29});
    states[16] = new State(new int[]{154,24},new int[]{-5,17});
    states[17] = new State(new int[]{61,18});
    states[18] = new State(new int[]{156,21,155,22,157,23},new int[]{-12,19});
    states[19] = new State(new int[]{59,20});
    states[20] = new State(-13);
    states[21] = new State(-14);
    states[22] = new State(-15);
    states[23] = new State(-16);
    states[24] = new State(-95);
    states[25] = new State(new int[]{91,26,154,-30});
    states[26] = new State(new int[]{93,27});
    states[27] = new State(-31);
    states[28] = new State(-32);
    states[29] = new State(-33);
    states[30] = new State(-34);
    states[31] = new State(-35);
    states[32] = new State(-36);
    states[33] = new State(new int[]{154,24},new int[]{-13,34,-5,38});
    states[34] = new State(new int[]{59,35,44,36});
    states[35] = new State(-17);
    states[36] = new State(new int[]{154,24},new int[]{-5,37});
    states[37] = new State(-18);
    states[38] = new State(-19);
    states[39] = new State(new int[]{150,178,154,24,140,30,147,31,135,32},new int[]{-11,40,-19,25,-5,28,-20,29});
    states[40] = new State(new int[]{154,24},new int[]{-5,41});
    states[41] = new State(new int[]{40,42});
    states[42] = new State(new int[]{154,24,140,30,147,31,135,32,41,-25},new int[]{-15,43,-17,172,-18,177,-11,175,-19,25,-5,28,-20,29});
    states[43] = new State(new int[]{41,44});
    states[44] = new State(new int[]{123,46},new int[]{-16,45});
    states[45] = new State(-20);
    states[46] = new State(-57,new int[]{-26,47});
    states[47] = new State(new int[]{125,48,154,24,139,144,151,151,134,156,145,158,123,46,59,163,140,30,147,31,135,32},new int[]{-21,49,-27,50,-22,51,-5,139,-16,162,-19,164,-20,167});
    states[48] = new State(-53);
    states[49] = new State(-58);
    states[50] = new State(-59);
    states[51] = new State(new int[]{61,52,40,131,152,135,153,137});
    states[52] = new State(new int[]{45,82,43,84,154,24,142,105,156,106,155,107,157,108,141,111,40,119},new int[]{-23,53,-28,81,-29,86,-22,87,-5,94});
    states[53] = new State(new int[]{59,54,128,55,129,57,130,59,131,61,133,63,60,65,132,67,62,69,43,71,45,73,42,75,47,77,37,79});
    states[54] = new State(-37);
    states[55] = new State(new int[]{45,82,43,84,154,24,142,105,156,106,155,107,157,108,141,111,40,119},new int[]{-23,56,-28,81,-29,86,-22,87,-5,94});
    states[56] = new State(new int[]{128,-60,129,57,130,59,131,61,133,63,60,65,132,67,62,69,43,71,45,73,42,75,47,77,37,79,59,-60,44,-60,41,-60,93,-60});
    states[57] = new State(new int[]{45,82,43,84,154,24,142,105,156,106,155,107,157,108,141,111,40,119},new int[]{-23,58,-28,81,-29,86,-22,87,-5,94});
    states[58] = new State(new int[]{128,-61,129,-61,130,59,131,61,133,63,60,65,132,67,62,69,43,71,45,73,42,75,47,77,37,79,59,-61,44,-61,41,-61,93,-61});
    states[59] = new State(new int[]{45,82,43,84,154,24,142,105,156,106,155,107,157,108,141,111,40,119},new int[]{-23,60,-28,81,-29,86,-22,87,-5,94});
    states[60] = new State(new int[]{128,-62,129,-62,130,59,131,61,133,63,60,65,132,67,62,69,43,71,45,73,42,75,47,77,37,79,59,-62,44,-62,41,-62,93,-62});
    states[61] = new State(new int[]{45,82,43,84,154,24,142,105,156,106,155,107,157,108,141,111,40,119},new int[]{-23,62,-28,81,-29,86,-22,87,-5,94});
    states[62] = new State(new int[]{128,-63,129,-63,130,59,131,61,133,63,60,65,132,67,62,69,43,71,45,73,42,75,47,77,37,79,59,-63,44,-63,41,-63,93,-63});
    states[63] = new State(new int[]{45,82,43,84,154,24,142,105,156,106,155,107,157,108,141,111,40,119},new int[]{-23,64,-28,81,-29,86,-22,87,-5,94});
    states[64] = new State(new int[]{128,-64,129,-64,130,-64,131,-64,133,63,60,65,132,67,62,69,43,71,45,73,42,75,47,77,37,79,59,-64,44,-64,41,-64,93,-64});
    states[65] = new State(new int[]{45,82,43,84,154,24,142,105,156,106,155,107,157,108,141,111,40,119},new int[]{-23,66,-28,81,-29,86,-22,87,-5,94});
    states[66] = new State(new int[]{128,-65,129,-65,130,-65,131,-65,133,63,60,65,132,67,62,69,43,71,45,73,42,75,47,77,37,79,59,-65,44,-65,41,-65,93,-65});
    states[67] = new State(new int[]{45,82,43,84,154,24,142,105,156,106,155,107,157,108,141,111,40,119},new int[]{-23,68,-28,81,-29,86,-22,87,-5,94});
    states[68] = new State(new int[]{128,-66,129,-66,130,-66,131,-66,133,63,60,65,132,67,62,69,43,71,45,73,42,75,47,77,37,79,59,-66,44,-66,41,-66,93,-66});
    states[69] = new State(new int[]{45,82,43,84,154,24,142,105,156,106,155,107,157,108,141,111,40,119},new int[]{-23,70,-28,81,-29,86,-22,87,-5,94});
    states[70] = new State(new int[]{128,-67,129,-67,130,-67,131,-67,133,63,60,65,132,67,62,69,43,71,45,73,42,75,47,77,37,79,59,-67,44,-67,41,-67,93,-67});
    states[71] = new State(new int[]{45,82,43,84,154,24,142,105,156,106,155,107,157,108,141,111,40,119},new int[]{-23,72,-28,81,-29,86,-22,87,-5,94});
    states[72] = new State(new int[]{128,-68,129,-68,130,-68,131,-68,133,-68,60,-68,132,-68,62,-68,43,-68,45,-68,42,75,47,77,37,79,59,-68,44,-68,41,-68,93,-68});
    states[73] = new State(new int[]{45,82,43,84,154,24,142,105,156,106,155,107,157,108,141,111,40,119},new int[]{-23,74,-28,81,-29,86,-22,87,-5,94});
    states[74] = new State(new int[]{128,-69,129,-69,130,-69,131,-69,133,-69,60,-69,132,-69,62,-69,43,-69,45,-69,42,75,47,77,37,79,59,-69,44,-69,41,-69,93,-69});
    states[75] = new State(new int[]{45,82,43,84,154,24,142,105,156,106,155,107,157,108,141,111,40,119},new int[]{-23,76,-28,81,-29,86,-22,87,-5,94});
    states[76] = new State(-70);
    states[77] = new State(new int[]{45,82,43,84,154,24,142,105,156,106,155,107,157,108,141,111,40,119},new int[]{-23,78,-28,81,-29,86,-22,87,-5,94});
    states[78] = new State(-71);
    states[79] = new State(new int[]{45,82,43,84,154,24,142,105,156,106,155,107,157,108,141,111,40,119},new int[]{-23,80,-28,81,-29,86,-22,87,-5,94});
    states[80] = new State(-72);
    states[81] = new State(-73);
    states[82] = new State(new int[]{45,82,43,84,154,24,142,105,156,106,155,107,157,108,141,111,40,119},new int[]{-23,83,-28,81,-29,86,-22,87,-5,94});
    states[83] = new State(new int[]{128,-74,129,-74,130,-74,131,-74,133,-74,60,-74,132,-74,62,-74,43,-74,45,-74,42,75,47,77,37,79,59,-74,44,-74,41,-74,93,-74});
    states[84] = new State(new int[]{45,82,43,84,154,24,142,105,156,106,155,107,157,108,141,111,40,119},new int[]{-23,85,-28,81,-29,86,-22,87,-5,94});
    states[85] = new State(new int[]{128,-75,129,-75,130,-75,131,-75,133,-75,60,-75,132,-75,62,-75,43,-75,45,-75,42,75,47,77,37,79,59,-75,44,-75,41,-75,93,-75});
    states[86] = new State(-76);
    states[87] = new State(new int[]{40,88,59,-77,128,-77,129,-77,130,-77,131,-77,133,-77,60,-77,132,-77,62,-77,43,-77,45,-77,42,-77,47,-77,37,-77,44,-77,41,-77,93,-77});
    states[88] = new State(new int[]{45,82,43,84,154,24,142,105,156,106,155,107,157,108,141,111,40,119,41,-49},new int[]{-24,89,-25,91,-23,130,-28,81,-29,86,-22,87,-5,94});
    states[89] = new State(new int[]{41,90});
    states[90] = new State(-78);
    states[91] = new State(new int[]{44,92,41,-50});
    states[92] = new State(new int[]{45,82,43,84,154,24,142,105,156,106,155,107,157,108,141,111,40,119},new int[]{-23,93,-28,81,-29,86,-22,87,-5,94});
    states[93] = new State(new int[]{128,55,129,57,130,59,131,61,133,63,60,65,132,67,62,69,43,71,45,73,42,75,47,77,37,79,44,-51,41,-51});
    states[94] = new State(new int[]{46,96,91,99,40,-94,59,-94,128,-94,129,-94,130,-94,131,-94,133,-94,60,-94,132,-94,62,-94,43,-94,45,-94,42,-94,47,-94,37,-94,44,-94,41,-94,93,-94,61,-94,152,-94,153,-94},new int[]{-30,95});
    states[95] = new State(-90);
    states[96] = new State(new int[]{154,24},new int[]{-5,97});
    states[97] = new State(new int[]{46,96,91,99,40,-94,59,-94,128,-94,129,-94,130,-94,131,-94,133,-94,60,-94,132,-94,62,-94,43,-94,45,-94,42,-94,47,-94,37,-94,44,-94,41,-94,93,-94,61,-94,152,-94,153,-94},new int[]{-30,98});
    states[98] = new State(-91);
    states[99] = new State(new int[]{93,103,45,82,43,84,154,24,142,105,156,106,155,107,157,108,141,111,40,119},new int[]{-23,100,-28,81,-29,86,-22,87,-5,94});
    states[100] = new State(new int[]{93,101,128,55,129,57,130,59,131,61,133,63,60,65,132,67,62,69,43,71,45,73,42,75,47,77,37,79});
    states[101] = new State(new int[]{46,96,91,99,40,-94,59,-94,128,-94,129,-94,130,-94,131,-94,133,-94,60,-94,132,-94,62,-94,43,-94,45,-94,42,-94,47,-94,37,-94,44,-94,41,-94,93,-94,61,-94,152,-94,153,-94},new int[]{-30,102});
    states[102] = new State(-92);
    states[103] = new State(new int[]{46,96,91,99,40,-94,59,-94,128,-94,129,-94,130,-94,131,-94,133,-94,60,-94,132,-94,62,-94,43,-94,45,-94,42,-94,47,-94,37,-94,44,-94,41,-94,93,-94,61,-94,152,-94,153,-94},new int[]{-30,104});
    states[104] = new State(-93);
    states[105] = new State(-79);
    states[106] = new State(-80);
    states[107] = new State(-81);
    states[108] = new State(new int[]{46,109,59,-82,128,-82,129,-82,130,-82,131,-82,133,-82,60,-82,132,-82,62,-82,43,-82,45,-82,42,-82,47,-82,37,-82,44,-82,41,-82,93,-82});
    states[109] = new State(new int[]{154,24},new int[]{-5,110});
    states[110] = new State(-83);
    states[111] = new State(new int[]{154,24,140,30,147,31,135,32},new int[]{-5,112,-19,115,-20,29});
    states[112] = new State(new int[]{40,113,91,-32});
    states[113] = new State(new int[]{41,114});
    states[114] = new State(-84);
    states[115] = new State(new int[]{91,116});
    states[116] = new State(new int[]{45,82,43,84,154,24,142,105,156,106,155,107,157,108,141,111,40,119},new int[]{-23,117,-28,81,-29,86,-22,87,-5,94});
    states[117] = new State(new int[]{93,118,128,55,129,57,130,59,131,61,133,63,60,65,132,67,62,69,43,71,45,73,42,75,47,77,37,79});
    states[118] = new State(-85);
    states[119] = new State(new int[]{45,82,43,84,154,24,142,105,156,106,155,107,157,108,141,111,40,119,140,30,147,31,135,32},new int[]{-23,120,-20,123,-28,81,-29,86,-22,87,-5,94});
    states[120] = new State(new int[]{41,121,128,55,129,57,130,59,131,61,133,63,60,65,132,67,62,69,43,71,45,73,42,75,47,77,37,79});
    states[121] = new State(new int[]{154,24,142,105,156,106,155,107,157,108,141,111,40,119,59,-86,128,-86,129,-86,130,-86,131,-86,133,-86,60,-86,132,-86,62,-86,43,-86,45,-86,42,-86,47,-86,37,-86,44,-86,41,-86,93,-86},new int[]{-29,122,-22,87,-5,94});
    states[122] = new State(-87);
    states[123] = new State(new int[]{41,124,91,126});
    states[124] = new State(new int[]{154,24,142,105,156,106,155,107,157,108,141,111,40,119},new int[]{-29,125,-22,87,-5,94});
    states[125] = new State(-88);
    states[126] = new State(new int[]{93,127});
    states[127] = new State(new int[]{41,128});
    states[128] = new State(new int[]{154,24,142,105,156,106,155,107,157,108,141,111,40,119},new int[]{-29,129,-22,87,-5,94});
    states[129] = new State(-89);
    states[130] = new State(new int[]{128,55,129,57,130,59,131,61,133,63,60,65,132,67,62,69,43,71,45,73,42,75,47,77,37,79,44,-52,41,-52});
    states[131] = new State(new int[]{45,82,43,84,154,24,142,105,156,106,155,107,157,108,141,111,40,119,41,-49},new int[]{-24,132,-25,91,-23,130,-28,81,-29,86,-22,87,-5,94});
    states[132] = new State(new int[]{41,133});
    states[133] = new State(new int[]{59,134});
    states[134] = new State(-38);
    states[135] = new State(new int[]{59,136});
    states[136] = new State(-39);
    states[137] = new State(new int[]{59,138});
    states[138] = new State(-40);
    states[139] = new State(new int[]{91,140,46,96,154,-32,61,-94,40,-94,152,-94,153,-94},new int[]{-30,95});
    states[140] = new State(new int[]{93,141,45,82,43,84,154,24,142,105,156,106,155,107,157,108,141,111,40,119},new int[]{-23,100,-28,81,-29,86,-22,87,-5,94});
    states[141] = new State(new int[]{154,24,46,96,91,99,61,-94,40,-94,152,-94,153,-94},new int[]{-13,142,-30,104,-5,38});
    states[142] = new State(new int[]{59,143,44,36});
    states[143] = new State(-55);
    states[144] = new State(new int[]{40,145});
    states[145] = new State(new int[]{45,82,43,84,154,24,142,105,156,106,155,107,157,108,141,111,40,119},new int[]{-23,146,-28,81,-29,86,-22,87,-5,94});
    states[146] = new State(new int[]{41,147,128,55,129,57,130,59,131,61,133,63,60,65,132,67,62,69,43,71,45,73,42,75,47,77,37,79});
    states[147] = new State(new int[]{154,24,139,144,151,151,134,156,145,158,123,46,59,163},new int[]{-21,148,-22,51,-5,94,-16,162});
    states[148] = new State(new int[]{138,149,125,-42,154,-42,139,-42,151,-42,134,-42,145,-42,123,-42,59,-42,140,-42,147,-42,135,-42});
    states[149] = new State(new int[]{154,24,139,144,151,151,134,156,145,158,123,46,59,163},new int[]{-21,150,-22,51,-5,94,-16,162});
    states[150] = new State(-41);
    states[151] = new State(new int[]{40,152});
    states[152] = new State(new int[]{45,82,43,84,154,24,142,105,156,106,155,107,157,108,141,111,40,119},new int[]{-23,153,-28,81,-29,86,-22,87,-5,94});
    states[153] = new State(new int[]{41,154,128,55,129,57,130,59,131,61,133,63,60,65,132,67,62,69,43,71,45,73,42,75,47,77,37,79});
    states[154] = new State(new int[]{154,24,139,144,151,151,134,156,145,158,123,46,59,163},new int[]{-21,155,-22,51,-5,94,-16,162});
    states[155] = new State(-43);
    states[156] = new State(new int[]{59,157});
    states[157] = new State(-44);
    states[158] = new State(new int[]{59,159,45,82,43,84,154,24,142,105,156,106,155,107,157,108,141,111,40,119},new int[]{-23,160,-28,81,-29,86,-22,87,-5,94});
    states[159] = new State(-45);
    states[160] = new State(new int[]{59,161,128,55,129,57,130,59,131,61,133,63,60,65,132,67,62,69,43,71,45,73,42,75,47,77,37,79});
    states[161] = new State(-46);
    states[162] = new State(-47);
    states[163] = new State(-48);
    states[164] = new State(new int[]{154,24},new int[]{-13,165,-5,38});
    states[165] = new State(new int[]{59,166,44,36});
    states[166] = new State(-54);
    states[167] = new State(new int[]{91,168,154,-33});
    states[168] = new State(new int[]{93,169});
    states[169] = new State(new int[]{154,24},new int[]{-13,170,-5,38});
    states[170] = new State(new int[]{59,171,44,36});
    states[171] = new State(-56);
    states[172] = new State(new int[]{44,173,41,-26});
    states[173] = new State(new int[]{154,24,140,30,147,31,135,32},new int[]{-18,174,-11,175,-19,25,-5,28,-20,29});
    states[174] = new State(-28);
    states[175] = new State(new int[]{154,24},new int[]{-5,176});
    states[176] = new State(-29);
    states[177] = new State(-27);
    states[178] = new State(new int[]{154,24},new int[]{-5,179});
    states[179] = new State(new int[]{40,180});
    states[180] = new State(new int[]{154,24,140,30,147,31,135,32,41,-25},new int[]{-15,181,-17,172,-18,177,-11,175,-19,25,-5,28,-20,29});
    states[181] = new State(new int[]{41,182});
    states[182] = new State(new int[]{123,46},new int[]{-16,183});
    states[183] = new State(-21);
    states[184] = new State(-22);
    states[185] = new State(-23);
    states[186] = new State(-24);
    states[187] = new State(new int[]{154,24},new int[]{-5,188});
    states[188] = new State(new int[]{123,189});
    states[189] = new State(-9,new int[]{-7,190});
    states[190] = new State(new int[]{125,191,144,14},new int[]{-8,11,-9,12,-10,13});
    states[191] = new State(-8);
    states[192] = new State(new int[]{154,24},new int[]{-5,193});
    states[193] = new State(new int[]{59,194});
    states[194] = new State(-4);
    states[195] = new State(-5);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,127});
    rules[2] = new Rule(-1, new int[]{-3,-4});
    rules[3] = new Rule(-3, new int[]{});
    rules[4] = new Rule(-3, new int[]{-3,148,-5,59});
    rules[5] = new Rule(-4, new int[]{-6});
    rules[6] = new Rule(-4, new int[]{-4,-6});
    rules[7] = new Rule(-6, new int[]{136,-5,123,-7,125});
    rules[8] = new Rule(-6, new int[]{136,-5,58,-5,123,-7,125});
    rules[9] = new Rule(-7, new int[]{});
    rules[10] = new Rule(-7, new int[]{-7,-8});
    rules[11] = new Rule(-7, new int[]{-7,-9});
    rules[12] = new Rule(-7, new int[]{-7,-10});
    rules[13] = new Rule(-8, new int[]{144,137,-11,-5,61,-12,59});
    rules[14] = new Rule(-12, new int[]{156});
    rules[15] = new Rule(-12, new int[]{155});
    rules[16] = new Rule(-12, new int[]{157});
    rules[17] = new Rule(-9, new int[]{144,-11,-13,59});
    rules[18] = new Rule(-13, new int[]{-13,44,-5});
    rules[19] = new Rule(-13, new int[]{-5});
    rules[20] = new Rule(-10, new int[]{144,-14,-11,-5,40,-15,41,-16});
    rules[21] = new Rule(-10, new int[]{144,-14,150,-5,40,-15,41,-16});
    rules[22] = new Rule(-14, new int[]{146});
    rules[23] = new Rule(-14, new int[]{149});
    rules[24] = new Rule(-14, new int[]{143});
    rules[25] = new Rule(-15, new int[]{});
    rules[26] = new Rule(-15, new int[]{-17});
    rules[27] = new Rule(-17, new int[]{-18});
    rules[28] = new Rule(-17, new int[]{-17,44,-18});
    rules[29] = new Rule(-18, new int[]{-11,-5});
    rules[30] = new Rule(-11, new int[]{-19});
    rules[31] = new Rule(-11, new int[]{-19,91,93});
    rules[32] = new Rule(-19, new int[]{-5});
    rules[33] = new Rule(-19, new int[]{-20});
    rules[34] = new Rule(-20, new int[]{140});
    rules[35] = new Rule(-20, new int[]{147});
    rules[36] = new Rule(-20, new int[]{135});
    rules[37] = new Rule(-21, new int[]{-22,61,-23,59});
    rules[38] = new Rule(-21, new int[]{-22,40,-24,41,59});
    rules[39] = new Rule(-21, new int[]{-22,152,59});
    rules[40] = new Rule(-21, new int[]{-22,153,59});
    rules[41] = new Rule(-21, new int[]{139,40,-23,41,-21,138,-21});
    rules[42] = new Rule(-21, new int[]{139,40,-23,41,-21});
    rules[43] = new Rule(-21, new int[]{151,40,-23,41,-21});
    rules[44] = new Rule(-21, new int[]{134,59});
    rules[45] = new Rule(-21, new int[]{145,59});
    rules[46] = new Rule(-21, new int[]{145,-23,59});
    rules[47] = new Rule(-21, new int[]{-16});
    rules[48] = new Rule(-21, new int[]{59});
    rules[49] = new Rule(-24, new int[]{});
    rules[50] = new Rule(-24, new int[]{-25});
    rules[51] = new Rule(-25, new int[]{-25,44,-23});
    rules[52] = new Rule(-25, new int[]{-23});
    rules[53] = new Rule(-16, new int[]{123,-26,125});
    rules[54] = new Rule(-27, new int[]{-19,-13,59});
    rules[55] = new Rule(-27, new int[]{-5,91,93,-13,59});
    rules[56] = new Rule(-27, new int[]{-20,91,93,-13,59});
    rules[57] = new Rule(-26, new int[]{});
    rules[58] = new Rule(-26, new int[]{-26,-21});
    rules[59] = new Rule(-26, new int[]{-26,-27});
    rules[60] = new Rule(-23, new int[]{-23,128,-23});
    rules[61] = new Rule(-23, new int[]{-23,129,-23});
    rules[62] = new Rule(-23, new int[]{-23,130,-23});
    rules[63] = new Rule(-23, new int[]{-23,131,-23});
    rules[64] = new Rule(-23, new int[]{-23,133,-23});
    rules[65] = new Rule(-23, new int[]{-23,60,-23});
    rules[66] = new Rule(-23, new int[]{-23,132,-23});
    rules[67] = new Rule(-23, new int[]{-23,62,-23});
    rules[68] = new Rule(-23, new int[]{-23,43,-23});
    rules[69] = new Rule(-23, new int[]{-23,45,-23});
    rules[70] = new Rule(-23, new int[]{-23,42,-23});
    rules[71] = new Rule(-23, new int[]{-23,47,-23});
    rules[72] = new Rule(-23, new int[]{-23,37,-23});
    rules[73] = new Rule(-23, new int[]{-28});
    rules[74] = new Rule(-28, new int[]{45,-23});
    rules[75] = new Rule(-28, new int[]{43,-23});
    rules[76] = new Rule(-28, new int[]{-29});
    rules[77] = new Rule(-29, new int[]{-22});
    rules[78] = new Rule(-29, new int[]{-22,40,-24,41});
    rules[79] = new Rule(-29, new int[]{142});
    rules[80] = new Rule(-29, new int[]{156});
    rules[81] = new Rule(-29, new int[]{155});
    rules[82] = new Rule(-29, new int[]{157});
    rules[83] = new Rule(-29, new int[]{157,46,-5});
    rules[84] = new Rule(-29, new int[]{141,-5,40,41});
    rules[85] = new Rule(-29, new int[]{141,-19,91,-23,93});
    rules[86] = new Rule(-29, new int[]{40,-23,41});
    rules[87] = new Rule(-29, new int[]{40,-23,41,-29});
    rules[88] = new Rule(-29, new int[]{40,-20,41,-29});
    rules[89] = new Rule(-29, new int[]{40,-20,91,93,41,-29});
    rules[90] = new Rule(-22, new int[]{-5,-30});
    rules[91] = new Rule(-30, new int[]{46,-5,-30});
    rules[92] = new Rule(-30, new int[]{91,-23,93,-30});
    rules[93] = new Rule(-30, new int[]{91,93,-30});
    rules[94] = new Rule(-30, new int[]{});
    rules[95] = new Rule(-5, new int[]{154});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // Program -> UsingList, ClassList
#line 61 "CbParser.y"
{ Tree = AST.NonLeaf(NodeType.Program, ValueStack[ValueStack.Depth-2].LineNumber, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 3: // UsingList -> /* empty */
#line 65 "CbParser.y"
{ CurrentSemanticValue = AST.Kary(NodeType.UsingList, LineNumber); Console.WriteLine("test");}
        break;
      case 4: // UsingList -> UsingList, Kwd_using, Identifier, ';'
#line 67 "CbParser.y"
{ ValueStack[ValueStack.Depth-4].AddChild(ValueStack[ValueStack.Depth-2]);  CurrentSemanticValue = ValueStack[ValueStack.Depth-4]; Console.WriteLine("test2");}
        break;
      case 5: // ClassList -> ClassDecl
#line 71 "CbParser.y"
{ CurrentSemanticValue = AST.Kary(NodeType.ClassList, LineNumber, ValueStack[ValueStack.Depth-1]); }
        break;
      case 6: // ClassList -> ClassList, ClassDecl
#line 73 "CbParser.y"
{ ValueStack[ValueStack.Depth-2].AddChild(ValueStack[ValueStack.Depth-1]);  CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
        break;
      case 7: // ClassDecl -> Kwd_class, Identifier, '{', DeclList, '}'
#line 77 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.Class, ValueStack[ValueStack.Depth-4].LineNumber, ValueStack[ValueStack.Depth-4], null, ValueStack[ValueStack.Depth-2]); }
        break;
      case 8: // ClassDecl -> Kwd_class, Identifier, ':', Identifier, '{', DeclList, '}'
#line 79 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.Class, ValueStack[ValueStack.Depth-6].LineNumber, ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
        break;
      case 9: // DeclList -> /* empty */
#line 83 "CbParser.y"
{ CurrentSemanticValue = AST.Kary(NodeType.MemberList, LineNumber);}
        break;
      case 10: // DeclList -> DeclList, ConstDecl
#line 85 "CbParser.y"
{ ValueStack[ValueStack.Depth-2].AddChild(ValueStack[ValueStack.Depth-1]);  CurrentSemanticValue = ValueStack[ValueStack.Depth-2];}
        break;
      case 11: // DeclList -> DeclList, FieldDecl
#line 87 "CbParser.y"
{ ValueStack[ValueStack.Depth-2].AddChild(ValueStack[ValueStack.Depth-1]);  CurrentSemanticValue = ValueStack[ValueStack.Depth-2];}
        break;
      case 12: // DeclList -> DeclList, MethodDecl
#line 89 "CbParser.y"
{ ValueStack[ValueStack.Depth-2].AddChild(ValueStack[ValueStack.Depth-1]);  CurrentSemanticValue = ValueStack[ValueStack.Depth-2];}
        break;
      case 13: // ConstDecl -> Kwd_public, Kwd_const, Type, Identifier, '=', InitVal, ';'
#line 93 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.Const, LineNumber, ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
        break;
      case 14: // InitVal -> IntConst
#line 97 "CbParser.y"
{ CurrentSemanticValue = AST.Leaf(NodeType.IntConst, LineNumber, Convert.ToInt32(lexer.yytext)); }
        break;
      case 15: // InitVal -> CharConst
#line 99 "CbParser.y"
{ CurrentSemanticValue = AST.Leaf(NodeType.CharConst, LineNumber, lexer.yytext); }
        break;
      case 16: // InitVal -> StringConst
#line 101 "CbParser.y"
{ CurrentSemanticValue = AST.Leaf(NodeType.StringConst, LineNumber, lexer.yytext); }
        break;
      case 17: // FieldDecl -> Kwd_public, Type, IdentList, ';'
#line 105 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.Field, LineNumber, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2]); }
        break;
      case 18: // IdentList -> IdentList, ',', Identifier
#line 109 "CbParser.y"
{ ValueStack[ValueStack.Depth-3].AddChild(ValueStack[ValueStack.Depth-1]);  CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
        break;
      case 19: // IdentList -> Identifier
#line 111 "CbParser.y"
{ CurrentSemanticValue = AST.Kary(NodeType.IdList, LineNumber, ValueStack[ValueStack.Depth-1]); }
        break;
      case 20: // MethodDecl -> Kwd_public, MethodAttr, Type, Identifier, '(', OptFormals, ')', 
               //               Block
#line 115 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.Method, ValueStack[ValueStack.Depth-7].LineNumber, ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-7]); }
        break;
      case 21: // MethodDecl -> Kwd_public, MethodAttr, Kwd_void, Identifier, '(', OptFormals, 
               //               ')', Block
#line 117 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.Method, ValueStack[ValueStack.Depth-7].LineNumber, null, ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-7]); }
        break;
      case 22: // MethodAttr -> Kwd_static
#line 121 "CbParser.y"
{ CurrentSemanticValue = AST.Leaf(NodeType.Static, LineNumber, lexer.yytext); }
        break;
      case 23: // MethodAttr -> Kwd_virtual
#line 123 "CbParser.y"
{ CurrentSemanticValue = AST.Leaf(NodeType.Virtual, LineNumber, lexer.yytext); }
        break;
      case 24: // MethodAttr -> Kwd_override
#line 125 "CbParser.y"
{ CurrentSemanticValue = AST.Leaf(NodeType.Override, LineNumber, lexer.yytext); }
        break;
      case 25: // OptFormals -> /* empty */
#line 129 "CbParser.y"
{ CurrentSemanticValue = AST.Kary(NodeType.FormalList, LineNumber);}
        break;
      case 26: // OptFormals -> FormalPars
#line 131 "CbParser.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 27: // FormalPars -> FormalDecl
#line 135 "CbParser.y"
{ CurrentSemanticValue = AST.Kary(NodeType.FormalList, LineNumber, ValueStack[ValueStack.Depth-1]); }
        break;
      case 28: // FormalPars -> FormalPars, ',', FormalDecl
#line 137 "CbParser.y"
{ ValueStack[ValueStack.Depth-3].AddChild(ValueStack[ValueStack.Depth-1]);  CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
        break;
      case 29: // FormalDecl -> Type, Identifier
#line 141 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.Formal, LineNumber, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 30: // Type -> TypeName
#line 145 "CbParser.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 31: // Type -> TypeName, '[', ']'
#line 147 "CbParser.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
        break;
      case 32: // TypeName -> Identifier
#line 151 "CbParser.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 33: // TypeName -> BuiltInType
#line 153 "CbParser.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 34: // BuiltInType -> Kwd_int
#line 157 "CbParser.y"
{ CurrentSemanticValue = AST.Leaf(NodeType.IntType, LineNumber, lexer.yytext); }
        break;
      case 35: // BuiltInType -> Kwd_string
#line 159 "CbParser.y"
{ CurrentSemanticValue = AST.Leaf(NodeType.StringType, LineNumber, lexer.yytext); }
        break;
      case 36: // BuiltInType -> Kwd_char
#line 161 "CbParser.y"
{ CurrentSemanticValue = AST.Leaf(NodeType.CharType, LineNumber, lexer.yytext); }
        break;
      case 37: // Statement -> Designator, '=', Expr, ';'
#line 165 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.Assign, LineNumber, ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
        break;
      case 38: // Statement -> Designator, '(', OptActuals, ')', ';'
#line 167 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.Call, LineNumber, ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3]); }
        break;
      case 39: // Statement -> Designator, PLUSPLUS, ';'
#line 169 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.PlusPlus, LineNumber, ValueStack[ValueStack.Depth-3]); }
        break;
      case 40: // Statement -> Designator, MINUSMINUS, ';'
#line 171 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.MinusMinus, LineNumber, ValueStack[ValueStack.Depth-3]); }
        break;
      case 41: // Statement -> Kwd_if, '(', Expr, ')', Statement, Kwd_else, Statement
#line 173 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.If, LineNumber, ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 42: // Statement -> Kwd_if, '(', Expr, ')', Statement
#line 175 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.If, LineNumber, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1], AST.Leaf(NodeType.Empty, LineNumber)); }
        break;
      case 43: // Statement -> Kwd_while, '(', Expr, ')', Statement
#line 177 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.While, LineNumber, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 44: // Statement -> Kwd_break, ';'
#line 179 "CbParser.y"
{ CurrentSemanticValue = AST.Leaf(NodeType.Break, LineNumber); }
        break;
      case 45: // Statement -> Kwd_return, ';'
#line 181 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.Break, LineNumber, null); }
        break;
      case 46: // Statement -> Kwd_return, Expr, ';'
#line 183 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.Break, LineNumber, ValueStack[ValueStack.Depth-2]); }
        break;
      case 47: // Statement -> Block
#line 185 "CbParser.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 48: // Statement -> ';'
#line 187 "CbParser.y"
{ CurrentSemanticValue = AST.Leaf(NodeType.Empty, LineNumber); }
        break;
      case 49: // OptActuals -> /* empty */
#line 191 "CbParser.y"
{ CurrentSemanticValue = AST.Kary(NodeType.FormalList, LineNumber);}
        break;
      case 50: // OptActuals -> ActPars
#line 193 "CbParser.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 51: // ActPars -> ActPars, ',', Expr
#line 197 "CbParser.y"
{ ValueStack[ValueStack.Depth-3].AddChild(ValueStack[ValueStack.Depth-1]);  CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
        break;
      case 52: // ActPars -> Expr
#line 199 "CbParser.y"
{ CurrentSemanticValue = AST.Kary(NodeType.FormalList, LineNumber, ValueStack[ValueStack.Depth-1]); }
        break;
      case 53: // Block -> '{', DeclsAndStmts, '}'
#line 203 "CbParser.y"
{CurrentSemanticValue = ValueStack[ValueStack.Depth-2];}
        break;
      case 54: // LocalDecl -> TypeName, IdentList, ';'
#line 207 "CbParser.y"
{CurrentSemanticValue = AST.NonLeaf(NodeType.LocalDecl, LineNumber, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2]); }
        break;
      case 55: // LocalDecl -> Identifier, '[', ']', IdentList, ';'
#line 209 "CbParser.y"
{CurrentSemanticValue = AST.NonLeaf(NodeType.LocalDecl, LineNumber, ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-2]); }
        break;
      case 56: // LocalDecl -> BuiltInType, '[', ']', IdentList, ';'
#line 211 "CbParser.y"
{CurrentSemanticValue = AST.NonLeaf(NodeType.LocalDecl, LineNumber, ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-2]); }
        break;
      case 57: // DeclsAndStmts -> /* empty */
#line 215 "CbParser.y"
{CurrentSemanticValue = AST.Kary(NodeType.Block, LineNumber); }
        break;
      case 58: // DeclsAndStmts -> DeclsAndStmts, Statement
#line 217 "CbParser.y"
{ ValueStack[ValueStack.Depth-2].AddChild(ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
        break;
      case 59: // DeclsAndStmts -> DeclsAndStmts, LocalDecl
#line 219 "CbParser.y"
{ ValueStack[ValueStack.Depth-2].AddChild(ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
        break;
      case 60: // Expr -> Expr, OROR, Expr
#line 223 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.Or, LineNumber, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]);}
        break;
      case 61: // Expr -> Expr, ANDAND, Expr
#line 225 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.And, LineNumber, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]);}
        break;
      case 62: // Expr -> Expr, EQEQ, Expr
#line 227 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.Equals, LineNumber, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]);}
        break;
      case 63: // Expr -> Expr, NOTEQ, Expr
#line 229 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.NotEquals, LineNumber, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]);}
        break;
      case 64: // Expr -> Expr, LTEQ, Expr
#line 231 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.LessOrEqual, LineNumber, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]);}
        break;
      case 65: // Expr -> Expr, '<', Expr
#line 233 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.LessThan, LineNumber, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]);}
        break;
      case 66: // Expr -> Expr, GTEQ, Expr
#line 235 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.GreaterOrEqual, LineNumber, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]);}
        break;
      case 67: // Expr -> Expr, '>', Expr
#line 237 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.GreaterThan, LineNumber, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]);}
        break;
      case 68: // Expr -> Expr, '+', Expr
#line 239 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.Add, LineNumber, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]);}
        break;
      case 69: // Expr -> Expr, '-', Expr
#line 241 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.Sub, LineNumber, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]);}
        break;
      case 70: // Expr -> Expr, '*', Expr
#line 243 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.Mul, LineNumber, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]);}
        break;
      case 71: // Expr -> Expr, '/', Expr
#line 245 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.Div, LineNumber, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]);}
        break;
      case 72: // Expr -> Expr, '%', Expr
#line 247 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.Mod, LineNumber, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]);}
        break;
      case 73: // Expr -> UnaryExpr
#line 249 "CbParser.y"
{CurrentSemanticValue = ValueStack[ValueStack.Depth-1];}
        break;
      case 74: // UnaryExpr -> '-', Expr
#line 253 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.UnaryMinus, LineNumber, ValueStack[ValueStack.Depth-1]);}
        break;
      case 75: // UnaryExpr -> '+', Expr
#line 255 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.UnaryPlus, LineNumber, ValueStack[ValueStack.Depth-1]);}
        break;
      case 76: // UnaryExpr -> UnaryExprNotUMinus
#line 257 "CbParser.y"
{CurrentSemanticValue = ValueStack[ValueStack.Depth-1];}
        break;
      case 77: // UnaryExprNotUMinus -> Designator
#line 262 "CbParser.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 78: // UnaryExprNotUMinus -> Designator, '(', OptActuals, ')'
#line 264 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.Call, LineNumber, ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
        break;
      case 79: // UnaryExprNotUMinus -> Kwd_null
#line 266 "CbParser.y"
{ CurrentSemanticValue = AST.Leaf(NodeType.Null, LineNumber); }
        break;
      case 80: // UnaryExprNotUMinus -> IntConst
#line 268 "CbParser.y"
{ CurrentSemanticValue = AST.Leaf(NodeType.IntConst, LineNumber, Convert.ToInt32(lexer.yytext)); }
        break;
      case 81: // UnaryExprNotUMinus -> CharConst
#line 270 "CbParser.y"
{ CurrentSemanticValue = AST.Leaf(NodeType.CharConst, LineNumber, lexer.yytext); }
        break;
      case 82: // UnaryExprNotUMinus -> StringConst
#line 272 "CbParser.y"
{ CurrentSemanticValue = AST.Leaf(NodeType.StringConst, LineNumber, lexer.yytext); }
        break;
      case 83: // UnaryExprNotUMinus -> StringConst, '.', Identifier
#line 274 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.Dot, LineNumber, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]);}
        break;
      case 84: // UnaryExprNotUMinus -> Kwd_new, Identifier, '(', ')'
#line 276 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.NewClass, LineNumber, ValueStack[ValueStack.Depth-3]);}
        break;
      case 85: // UnaryExprNotUMinus -> Kwd_new, TypeName, '[', Expr, ']'
#line 278 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.NewArray, LineNumber, ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]);}
        break;
      case 86: // UnaryExprNotUMinus -> '(', Expr, ')'
#line 280 "CbParser.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
        break;
      case 87: // UnaryExprNotUMinus -> '(', Expr, ')', UnaryExprNotUMinus
#line 282 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.Cast, LineNumber, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 88: // UnaryExprNotUMinus -> '(', BuiltInType, ')', UnaryExprNotUMinus
#line 284 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.Cast, LineNumber, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 89: // UnaryExprNotUMinus -> '(', BuiltInType, '[', ']', ')', UnaryExprNotUMinus
#line 286 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.Cast, LineNumber, ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-1]); }
        break;
      case 90: // Designator -> Identifier, Qualifiers
#line 291 "CbParser.y"
{ CurrentSemanticValue = AST.repNull(ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-2]); }
        break;
      case 91: // Qualifiers -> '.', Identifier, Qualifiers
#line 295 "CbParser.y"
{ AST t = AST.NonLeaf(NodeType.Dot, LineNumber, null, ValueStack[ValueStack.Depth-2]); CurrentSemanticValue = AST.repNull(ValueStack[ValueStack.Depth-1],t); }
        break;
      case 92: // Qualifiers -> '[', Expr, ']', Qualifiers
#line 297 "CbParser.y"
{ AST t = AST.NonLeaf(NodeType.Index, LineNumber, null, ValueStack[ValueStack.Depth-3]); CurrentSemanticValue = AST.repNull(ValueStack[ValueStack.Depth-1],t); }
        break;
      case 93: // Qualifiers -> '[', ']', Qualifiers
#line 299 "CbParser.y"
{ AST t = AST.NonLeaf(NodeType.Array, LineNumber, null); CurrentSemanticValue = AST.repNull(ValueStack[ValueStack.Depth-1],t); }
        break;
      case 94: // Qualifiers -> /* empty */
#line 301 "CbParser.y"
{ CurrentSemanticValue = null; }
        break;
      case 95: // Identifier -> Ident
#line 304 "CbParser.y"
{ CurrentSemanticValue = AST.Leaf(NodeType.Ident, LineNumber, lexer.yytext); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 307 "CbParser.y"

#line 308 "CbParser.y"
// returns the AST constructed for the Cb program
#line 309 "CbParser.y"
public AST Tree { get; private set; }
#line 310 "CbParser.y"

#line 311 "CbParser.y"
private Scanner lexer;
#line 312 "CbParser.y"

#line 313 "CbParser.y"
// returns the lexer's current line number
#line 314 "CbParser.y"
public int LineNumber {
#line 315 "CbParser.y"
    get{ return lexer.LineNumber == 0? 1 : lexer.LineNumber; }
#line 316 "CbParser.y"
}
#line 317 "CbParser.y"

#line 318 "CbParser.y"
// Use this function for reporting non-fatal errors discovered
#line 319 "CbParser.y"
// while parsing and building the AST.
#line 320 "CbParser.y"
// An example usage is:
#line 321 "CbParser.y"
//    yyerror( "Identifier {0} has not been declared", idname );
#line 322 "CbParser.y"
public void yyerror( string format, params Object[] args ) {
#line 323 "CbParser.y"
    Console.Write("{0}: ", LineNumber);
#line 324 "CbParser.y"
    Console.WriteLine(format, args);
#line 325 "CbParser.y"
}
#line 326 "CbParser.y"

#line 327 "CbParser.y"
// The parser needs a suitable constructor
#line 328 "CbParser.y"
public Parser( Scanner src ) : base(null) {
#line 329 "CbParser.y"
    lexer = src;
#line 330 "CbParser.y"
    Scanner = src;
#line 331 "CbParser.y"
}
#line 332 "CbParser.y"

#line 333 "CbParser.y"

}
}
